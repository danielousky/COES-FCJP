-# frozen_string_literal: true
= simple_form_for @payment_report_new, html: { class: 'form-horizontal', novalidate: false } do |f|

  =# f.input :payable, as: :hidden
  = f.input :payable_id, as: :hidden
  = f.input :payable_type, as: :hidden

  =# f.input :amount, disabled: true, input_html: { class: 'disabled' }, as: :currency
  =# f.input :amount, as: :hidden
  = f.input :amount, as: :currency
  = f.input :transaction_id, input_html: {aria: {required: true}, oninput: "onlyNumbers($(this))"}, required: true
  =# f.input :transaction_type, collection: PaymentReport.transaction_types.map{|e| e}#,  as: :radio
  =# f.collection_radio_buttons :transaction_type, PaymentReport.transaction_types.keys, nil, nil
  = f.input :transaction_type, collection: PaymentReport.transaction_types.keys.map{|a| [a.titleize, a]}, as: :radio_buttons, required: true

  = f.input :transaction_date, as: :date, start_year: Date.today.year,
                            end_year: Date.today.year,
                            order: [:day, :month, :year]
  = f.association :origin_bank, required: true
  =# f.association :payable

  - bank_accounts = @payment_report_new.school_by_payable&.bank_accounts
  - bank_accounts = @payment_report_new.school_by_payable&.faculty&.bank_accounts unless bank_accounts.any?
  = f.association :receiving_bank_account, collection: bank_accounts, include_blank: false

  = f.input :voucher, required: true, input_html: {accept: "image/jpeg,image/jpg,image/png"}
  = f.input :owner_account_name, required: true, input_html: {onInput: "$(this).val($(this).val().toUpperCase().replace(/[^A-Z| ]/g,''))"}
  = f.input :owner_account_ci, required: true, input_html: {onInput: "$(this).val($(this).val().replace(/[^0-9]/g,''))"}

  .form-actions
    = f.button :submit

:javascript

  function onlyNumbers(e){
    e.val(e.val().replace(/[^0-9]/g, ''));
  }